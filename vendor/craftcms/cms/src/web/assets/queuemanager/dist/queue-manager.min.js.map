{"version":3,"sources":["queuemanager/src/queue-manager.js"],"names":["Vue","el","delimiters","data","loading","indexTimeout","totalJobs","totalJobsFormatted","activeJobId","activeJob","mounted","getElementById","removeAttribute","Craft","on","jobs","cp","jobInfo","slice","formatNumber","this","window","onpopstate","event","state","jobId","setActiveJob","clearActiveJob","m","path","match","history","replaceState","url","methods","trackJobProgress","pushState","Promise","resolve","reject","clearTimeout","get","getActionUrl","then","response","id","displayError","error","refreshActiveJob","oldJob","success","status","$","extend","progress","catch","postActionRequest","displayNotice","t","updateJobProgress","confirm","retryJob","job","message","description","retryActiveJob","releaseActiveJob","released","getUrl","isRetryable","jobStatusClass","jobStatusLabel","delay","jobStatusIconClass","c","name","ttrValue","value","jobAttributeName","action","params","textStatus"],"mappings":";;;;;AAaA,IAAIA,IAAI,CACFC,GAAE,QACJC,WAAa,CAAA,KAAM,MACnBC,KAAI,KAAG,CACIC,SAAA,EACHA,aADG,KAEHC,KAAY,GACNC,UAHH,KAIHA,mBAJG,KAKHC,YAAkB,KAClBC,UANG,KAOHC,MAAW,KAOvBC,UACIA,SAAUC,eAAA,yBAAAC,gBAAA,SAGNC,MAASC,GAAGA,GAAA,aAAc,KACjBC,KAALA,KAAkBC,MAAGC,GAAAA,QAAcC,MAAnC,GACKZ,KAAAA,UAAkBU,MAAGV,GAAAA,UACrBC,KAAAA,mBAA2BY,MAAAA,aAAkBb,KAAAA,WAC7Cc,KAAKhB,SAAAA,KAAAA,qBAKdiB,OAAOC,WAAcC,IAAdD,EAAPE,OAAoBD,EAAWC,MAAAC,MACjBD,KAANE,aAAqBF,EAAMC,MAAOA,OAAA,GAE/BL,KAAAO,gBAAA,IAMX,IAAIC,EAAIf,MAAMgB,KAAKC,MAAM,sCAArBF,GAAIf,EAAAA,CAEJ,IAAIY,EAAQG,EAAE,GADXG,QAAAC,aAAA,CAAAP,MAAAA,GAAA,GAAAL,KAAAa,IAAAR,IACCA,KAAKC,aAATD,GAAA,KAEAS,QAAKR,CAIbQ,oBACIrB,MAAAG,GAAAmB,kBAAA,GAAA,IASRT,aAAAD,EAAAW,GACA,OAAA,IAAAC,QAAA,CAAAC,EAAAC,KACAlB,OAAAmB,aAAApB,KAAAf,cACAe,KAAAhB,SAAA,EACoBgB,KAACK,YAAkBA,EAEhBe,GACPT,QAAAK,UAAA,CAAAX,MAAAA,GAAA,GAAAL,KAAAa,IAAAR,IAGIW,MAAJK,IAAe5B,MAAA6B,aAAA,4BAAAjB,EAAA,KAAAkB,KAAAC,IACHR,EAAUjC,KAAA0C,IAAAzB,KAAAZ,aAQlBY,KAAKX,UAAYmC,EAASzC,KALpBU,KAAM6B,SAAAA,EACRE,GAAcC,IAJQpB,GAAAA,IAKfmB,IACP/B,MAAAG,GAAA8B,aAAAF,EAAAA,SAAAzC,KAAA4C,OACHR,EAAAK,QAbTI,mBAfC,OAAA,IAAAX,QAAA,CAAAC,EAAAC,KA6CG,IAAKnB,KAAKZ,YAL1B,YADQ8B,GAAA,GAGR,IAAAW,EAAA7B,KAAAX,UACQuC,KAAgBtB,aAAGN,KAAAZ,aAAA,GAAAmC,KAAAO,IAED1C,GAAayC,GAAA,GAAA7B,KAAAX,UAAA0C,SACnBC,EAAAC,OAAAJ,EAAA,CACAK,SAAA,IACHH,OAAA,WACiB1C,EAAlBsC,aACuBvC,EAAAA,cACnBY,KAAAX,UAAAwC,GAEIX,EAAAY,KACII,MAAUf,MAOlBD,WACDiB,OAAMhB,IAZTF,QAAA,CAAAC,EAAAC,KANJlB,OAAAmB,aAAApB,KAAAf,cA5CCe,KAAAoC,kBAAA,mBAAAb,KAAAC,IA0EO/B,MAAMG,GAAGyC,cAAc5C,MAAM6C,EAAE,MAAO,8BARlDtC,KAAAuC,oBACRrB,MACAiB,MAAAhB,MAQoBD,aACDiB,OAAMhB,IAJTF,QAAA,CAAAC,EAAAC,KAFJqB,QAAA/C,MAAA6C,EAAA,MAAA,4DAYZtC,KAAAoC,kBAAA,qBAAAb,KAAAC,IACA/B,MAAAG,GAAAyC,cAAA5C,MAAA6C,EAAA,MAAA,uBACqBtC,KAAAO,gBAAA,GACEU,KAAQsB,oBACHrB,GAAC,KACDiB,MAARhB,GAxFPD,GAAA,MAiGIuB,SAAQtB,GAXb,OAAA,IAAAF,QAAA,CAAAC,EAAAC,KAuBI,GAAkB,GAAduB,EAAIX,OAAa,CAR7B,IAAAY,EAAAlD,MAAA6C,EAAA,MAAA,wFAAA,CACRM,YAAAF,EAAAE,cAEA,IAAAJ,QAAAG,GAEsB,YADtBzB,GAAA,GAKwByB,OAAOvB,aAAWpB,KAAOf,cAA7Be,KAAAoC,kBAAA,cAAA,CAAAX,GAAAiB,EAAAjB,KAAAF,KAAAC,IAYkB,GAAdkB,EAAIX,OATKY,MAAD/C,GAAWyC,cAAA5C,MAAA6C,EAAA,MAAA,mBAEnB7C,MAAAG,GAAAyC,cAAA5C,MAAA6C,EAAA,MAAA,iBAaJtC,KAAKuC,oBATFnB,GAAa,KAEfgB,MAAAA,MAiBbS,iBAVY,OAAKN,IAAAA,QAAAA,CAALrB,EAAAC,KACAD,KAAQuB,SAARzC,KAAAX,WAAAkC,KAAAL,GAAAiB,MAAAhB,MASZ0B,WAAcH,GACV,OAAWzB,IAAAA,QAASC,CAAAA,EAADC,KACVsB,IAAAA,EAAcpD,MAAnBiD,EAA8Bf,MAAKL,4DAAnC,CADJ0B,YAAAF,EAAAE,cAeSJ,QAAQG,GAP7B3C,KAAAoC,kBAAA,gBAAA,CAAAX,GAAAiB,EAAAjB,KAAAF,KAAAC,IACA/B,MAAAG,GAAAyC,cAAA5C,MAAA6C,EAAA,MAAA,kBACwBtC,KAAAuC,oBACDtB,GAASC,KANxBA,GAAA,MA0BA4B,mBAZQ,OAAKV,IAAAA,QAAkB,CAAAlB,EAAAC,KAAsBuB,KAAIjB,WAAAA,KAAAA,WAAAA,KAAAA,IAAkBsB,GACtDV,KAAAA,gBAAsB,GAEvBnB,EAAR6B,KAHJZ,MAAAhB,MAYR2B,eAAmB9B,GACJC,KAAAA,YAIFjB,KAAAX,UAAA,KAgBTW,KAAKZ,YAAc,KAnBf4B,GADJL,QAAAK,UAAA,GAAA,GAAAhB,KAAAa,SAgBIA,IAAAR,GACHZ,MAAAuD,OAAA,2BAAA3C,EAAA,IAAAA,EAAA,KA5LA4C,YAAAP,GAqNoB,GAAdA,EAAIX,QAA6B,GAAdW,EAAIX,OArN7BmB,eAAAnB,GA8Na,GAAVA,EAfR,QAER,GASAoB,eAAApB,EAAAqB,GACA,GAAAA,EACA,OAAA3D,MAAA6C,EAAA,MAAA,WAGgB,OAAOP,GACV,KAAA,EAiBO,OAAOtC,MAAM6C,EAAE,MAAO,WAjP7B,KAAA,EAoPO,OAAO7C,MAAM6C,EAAE,MAAO,YAf1C,KAAA,EACA,OAAA7C,MAAA6C,EAAA,MAAA,YAEA,KAAA,EACA,OAAA7C,MAAA6C,EAAA,MAAA,UAEY,QACgB,MAAG,KAQXe,mBAAetB,GACf,IAAAuB,EAAA,SAmBR,OAAQvB,GAlBJ,KAAA,EACWtC,GAAQ,UACf,MAoBJ,KAAK,EAnBL6D,GAAA,SACW7D,MACP,KAAA,EAqBA6D,GAAK,OAjCb,OAAAA,GAuBJD,iBAAmBtB,GACV,OAAGwB,GAsBJ,IAAK,KArBT,OAAA9D,MAAA6C,EAAA,MAAA,MACI,IAAA,SACS,OAAL7C,MAAA6C,EAAA,MAAA,UACA,IAAA,WAuBA,OAAO7C,MAAM6C,EAAE,MAAO,YAtB1B,IAAA,cACS,OAAL7C,MAAA6C,EAAA,MAAA,eACA,IAAA,MAwBA,OAAO7C,MAAM6C,EAAE,MAAO,mBAvB1B,IAAA,QACS,OAAL7C,MAAA6C,EAAA,MAAA,SACA,QATR,OAAAiB,IAkBZC,SAAAC,GACQC,MAAgBpB,EAAO,MAAA,yDAAA,CACXiB,IAARE,IAOIrB,kBAAK,CAALuB,EAAAC,IACWnE,IAAM6C,QAAN,CAAepB,EAAAC,KA6B1B1B,MAAM2C,kBAAkBuB,EAAQC,EAAQ,CAACpC,EAAUqC,KA5BnD,YAAAA,EAGWpE,EAAQ+B,GAFRL","file":"queue-manager.min.js","sourcesContent":["/**\n * @link https://craftcms.com/\n * @copyright Copyright (c) Pixel & Tonic, Inc.\n * @license https://craftcms.github.io/license/\n */\n\n/**\n * Vue component for the Queue manager\n *\n * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>\n * @author Global Network Group | Giel Tettelaar <giel@yellowflash.net>\n * @since 3.2\n */\nnew Vue({\n    el: \"#main\",\n    delimiters: ['[[', ']]'],\n    data() {\n        return {\n            loading: false,\n            indexTimeout: null,\n            jobs: [],\n            totalJobs: null,\n            totalJobsFormatted: null,\n            activeJobId: null,\n            activeJob: null,\n            limit: 50\n        }\n    },\n\n    /**\n     * Mounted function\n     */\n    mounted() {\n        document.getElementById('queue-manager-utility').removeAttribute('class')\n\n        Craft.cp.on('setJobInfo', () => {\n            this.jobs = Craft.cp.jobInfo.slice(0)\n            this.totalJobs = Craft.cp.totalJobs\n            this.totalJobsFormatted = Craft.formatNumber(this.totalJobs)\n            if (!this.loading) {\n                this.refreshActiveJob()\n            }\n        })\n\n        window.onpopstate = (event) => {\n            if (event.state && event.state.jobId) {\n                this.setActiveJob(event.state.jobId, false)\n            } else {\n                this.clearActiveJob(false)\n            }\n        }\n\n        // Was a specific job requested?\n        let m = Craft.path.match(/utilities\\/queue-manager\\/([^\\/]+)/)\n        if (m) {\n            let jobId = m[1]\n            history.replaceState({jobId: jobId}, '', this.url(jobId))\n            this.setActiveJob(jobId, false)\n        }\n    },\n\n    methods: {\n        /**\n         * Force-updates the job progress.\n         */\n        updateJobProgress() {\n            Craft.cp.trackJobProgress(false, true)\n        },\n\n        /**\n         * Sets the active job that should be shown.\n         * @param {string} jobId\n         * @param {boolean} pushState\n         * @return {Promise}\n         */\n        setActiveJob(jobId, pushState) {\n            return new Promise((resolve, reject) => {\n                window.clearTimeout(this.indexTimeout)\n                this.loading = true\n                this.activeJobId = jobId\n\n                if (pushState) {\n                    history.pushState({jobId: jobId}, '', this.url(jobId))\n                }\n\n                axios.get(Craft.getActionUrl('queue/get-job-details?id=' + jobId + '', {})).then(response => {\n                    if (response.data.id != this.activeJobId) {\n                        resolve(false)\n                        return\n                    }\n                    this.activeJob = response.data\n                    this.loading = false\n                    resolve(true)\n                }, response => {\n                    Craft.cp.displayError(response.response.data.error)\n                    reject(response)\n                })\n            })\n        },\n\n        /**\n         * Refreshes the active job\n         * @return {Promise}\n         */\n        refreshActiveJob() {\n            return new Promise((resolve, reject) => {\n                if (!this.activeJobId) {\n                    resolve(false)\n                    return\n                }\n                let oldJob = this.activeJob\n                this.setActiveJob(this.activeJobId, false).then((success) => {\n                    // If it's done now, the response is probably missing critical info about the job\n                    if (success && oldJob && this.activeJob.status == 3) {\n                        $.extend(oldJob, {\n                            progress: 100,\n                            status: 3,\n                        })\n                        delete oldJob.error\n                        delete oldJob.progressLabel\n                        this.activeJob = oldJob\n                    }\n                    resolve(success)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries all jobs.\n         * @return {Promise}\n         */\n        retryAll() {\n            return new Promise((resolve, reject) => {\n                window.clearTimeout(this.indexTimeout)\n                this.postActionRequest('queue/retry-all').then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'Retrying all failed jobs.'))\n                    this.updateJobProgress()\n                    resolve()\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Releases all jobs.\n         * @return {Promise}\n         */\n        releaseAll() {\n            return new Promise((resolve, reject) => {\n                if (!confirm(Craft.t('app', 'Are you sure you want to release all jobs in the queue?'))) {\n                    resolve(false)\n                    return\n                }\n\n                this.postActionRequest('queue/release-all').then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'All jobs released.'))\n                    this.clearActiveJob(true)\n                    this.updateJobProgress()\n                    resolve(true)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries a specific job.\n         * @param {Object} job\n         * @return {Promise}\n         */\n        retryJob(job) {\n            return new Promise((resolve, reject) => {\n                // Only confirm if the job is currently reserved\n                if (job.status == 2) {\n                    let message = Craft.t('app', 'Are you sure you want to restart the job “{description}”? Any progress could be lost.', {\n                        description: job.description\n                    })\n                    if (!confirm(message)) {\n                        resolve(false)\n                        return\n                    }\n                }\n\n                window.clearTimeout(this.indexTimeout)\n\n                this.postActionRequest('queue/retry', {id: job.id}).then(response => {\n                    if (job.status == 2) {\n                        Craft.cp.displayNotice(Craft.t('app', 'Job restarted.'))\n                    } else {\n                        Craft.cp.displayNotice(Craft.t('app', 'Job retried.'))\n                    }\n\n                    this.updateJobProgress()\n                    resolve(true)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries the active job.\n         * @return {Promise}\n         */\n        retryActiveJob() {\n            return new Promise((resolve, reject) => {\n                this.retryJob(this.activeJob).then(resolve).catch(reject)\n            })\n        },\n\n        /**\n         * Releases a job.\n         * @param {Object} job\n         * @returns {Promise}\n         */\n        releaseJob(job) {\n            return new Promise((resolve, reject) => {\n                let message = Craft.t('app', 'Are you sure you want to release the job “{description}”?', {\n                    description: job.description\n                })\n                if (!confirm(message)) {\n                    resolve(false)\n                    return\n                }\n                this.postActionRequest('queue/release', {id: job.id}).then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'Job released.'))\n                    this.updateJobProgress()\n                    resolve(true)\n                })\n            })\n        },\n\n        /**\n         * Releases the active job.\n         * @returns {Promise}\n         */\n        releaseActiveJob() {\n            return new Promise((resolve, reject) => {\n                this.releaseJob(this.activeJob).then((released) => {\n                    if (released) {\n                        this.clearActiveJob(true)\n                    }\n                    resolve(released)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Resets an active job so that the index screen is displayed.\n         * @param {boolean} pushState\n         */\n        clearActiveJob(pushState) {\n            if (!this.activeJob) {\n                return\n            }\n\n            this.activeJob = null\n            this.activeJobId = null\n\n            if (pushState) {\n                history.pushState({}, '', this.url())\n            }\n        },\n\n        /**\n         * Returns a Queue Manager URL.\n         * @param {string|null} jobId\n         * @returns {string}\n         */\n        url(jobId) {\n            return Craft.getUrl('utilities/queue-manager' + (jobId ? '/' + jobId : ''))\n        },\n\n        /**\n         * Returns whether a job can be retried.\n         * @param {Object} job\n         * @returns {boolean}\n         */\n        isRetryable(job) {\n            return job.status == 2 || job.status == 4\n        },\n\n        /**\n         * Returns the class name a job's status cell should have.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusClass(status) {\n            if (status == 4) {\n                return 'error'\n            }\n            return ''\n        },\n\n        /**\n         * Returns a job status code.\n         * @param {number} status\n         * @param {number} delay\n         * @returns {string}\n         */\n        jobStatusLabel(status, delay) {\n            if (delay) {\n                return Craft.t('app', 'Delayed')\n            }\n\n            switch (status) {\n                case 1:\n                    return Craft.t('app', 'Pending')\n                    break\n                case 2:\n                    return Craft.t('app', 'Reserved')\n                    break\n                case 3:\n                    return Craft.t('app', 'Finished')\n                    break\n                case 4:\n                    return Craft.t('app', 'Failed')\n                    break\n                default:\n                    return ''\n            }\n        },\n\n        /**\n         * Returns a job status icon class.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusIconClass(status) {\n            let c = 'status'\n            switch (status) {\n                case 1:\n                    c += ' orange'\n                    break\n                case 2:\n                    c += ' green'\n                    break\n                case 4:\n                    c += ' red'\n                    break\n            }\n            return c\n        },\n\n        /**\n         * Returns a job attribute name.\n         * @param {string} name\n         * @returns {string}\n         */\n        jobAttributeName(name) {\n            switch (name) {\n                case 'id':\n                    return Craft.t('app', 'ID')\n                case 'status':\n                    return Craft.t('app', 'Status')\n                case 'progress':\n                    return Craft.t('app', 'Progress')\n                case 'description':\n                    return Craft.t('app', 'Description')\n                case 'ttr':\n                    return Craft.t('app', 'Time to reserve')\n                case 'error':\n                    return Craft.t('app', 'Error')\n                default:\n                    return name\n            }\n        },\n\n        /**\n         * Formats a TTR value.\n         * @param {string} value\n         * @return {string}\n         */\n        ttrValue(value) {\n            return Craft.t('app', '{num, number} {num, plural, =1{second} other{seconds}}', {\n                num: value\n            })\n        },\n\n        /**\n         * Promise wrapper for `Craft.postActionRequest()`.\n         * @param {string} action\n         * @param {Object} params\n         * @returns {Promise}\n         */\n        postActionRequest(action, params) {\n            return new Promise((resolve, reject) => {\n                Craft.postActionRequest(action, params, (response, textStatus) => {\n                    if (textStatus !== 'success') {\n                        reject()\n                        return\n                    }\n                    resolve(response)\n                })\n            })\n        }\n    }\n})\n"]}