{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","$container","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","selectedBlockType","blockTypeSort","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","totalNewBlockTypes","init","placeholderKey","$blockTypesColumnContainer","$blockTypeItemsContainer","this","$fieldItemsOuterContainer","children","$blockTypeItems","length","i","$item","blockTypes","BlockType","handle","id","data","addListener","newMatch","match","parseInt","getBlockTypeSettingsModal","DragSort","blockTypeSettingsModal","getFieldTypeInfo","addField","addItems","type","addBlockType","show","onSubmit","proxy","name","Promise","resolve","t","appendTo","applySettings","select","CancelToken","sendActionRequest","namespace","reject","displayError","BlockTypeSettingsModal","getFieldTypeSettingsHtml","setContainer","cancel","requestAnimationFrame","ui","$nameInput","$nameInputContainer","source","$handleField","createTextField","cancelToken","token","$body","$handleInput","response","$handleErrorList","$handleInputContainer","$deleteBtn","catch","cp","Modal","onFormSubmit","base","$form","$bod","visible","handleGenerator","listening","instructions","updateTarget","find","$nameErrorList","hide","label","class","$buttons","onDeleteClick","$cancelBtn","confirm","onDelete","$submitBtn","val","HandleGenerator","stopListening","addClass","ev","displayErrors","errors","isMobileBrowser","trim","$errorList","remove","shake","attr","text","startListening","removeClass","$handleHiddenInput","$settingsBtn","$fieldSettingsContainer","setTimeout","trigger","configurator","$handleLabel","$nameContainer","$nameHiddenInput","fields","$fieldItems","$nameLabel","totalNewFields","selectedField","fieldSort","axis","field","insertBefore","deselect","$win","$fieldItem","Field","onSortChange","$items","selectedFieldType","initializedFieldTypeSettings","$requiredCheckbox","$typeSelect","$translationSettingsContainer","$typeSettingsContainer","blockType","showSettings","fieldTypeSettingsTemplates","$widthInput","setFieldType","min","valueLabel","widthSlider","escapeHtml","updateHandleLabel","isNew","onTypeSelectChange","getDefaultFieldSettings","updateTranslationMethodSettings","detach","getFieldTypeSettings","then","footHtml","fresh","initUiElements","$settings","appendHeadHtml","headHtml","appendFootHtml","SlidePicker","max","step","width","pct","insertAfter","settingsHtml","getParsedFieldTypeHtml","updateNameLabel","html","updateRequiredIcon","prop","maxlength","createCheckboxField","$fieldset","checked","fieldTypeOptions","targetPrefix","$translationKeyFormatContainer","noop","createSelectField","replace","RegExp","selfDestruct","required","createTextareaField","push","value","options","isMultiSite","toggle","confirmDelete","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend({\n        fieldTypeInfo: null,\n\n        inputNamePrefix: null,\n        fieldTypeSettingsNamespace: null,\n        inputIdPrefix: null,\n        placeholderKey: null,\n\n        $container: null,\n\n        $blockTypesColumnContainer: null,\n        $fieldsColumnContainer: null,\n        $fieldSettingsColumnContainer: null,\n\n        $blockTypeItemsOuterContainer: null,\n        $blockTypeItemsContainer: null,\n        $fieldItemsContainer: null,\n        $fieldSettingItemsContainer: null,\n\n        $newBlockTypeBtn: null,\n        $newFieldBtn: null,\n\n        blockTypes: null,\n        selectedBlockType: null,\n        blockTypeSort: null,\n        totalNewBlockTypes: 0,\n\n        _fieldTypeSettingsHtml: null,\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n            this.fieldTypeInfo = fieldTypeInfo;\n            this.inputNamePrefix = inputNamePrefix;\n            this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n            this.placeholderKey = placeholderKey;\n\n            this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n            this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n            this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n            this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n            this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n            this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n            this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n            this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n            this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n            this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n            this._fieldTypeSettingsHtml = {};\n\n            // Find the existing block types\n            this.blockTypes = {};\n\n            var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n            for (var i = 0; i < $blockTypeItems.length; i++) {\n                var $item = $($blockTypeItems[i]),\n                    id = $item.data('id');\n\n                this.blockTypes[id] = new BlockType(this, $item);\n\n                // Is this a new block type?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                    this.totalNewBlockTypes = parseInt(newMatch[1]);\n                }\n            }\n\n            this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n            this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n        },\n\n        getFieldTypeInfo: function(type) {\n            for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                if (this.fieldTypeInfo[i].type === type) {\n                    return this.fieldTypeInfo[i];\n                }\n            }\n        },\n\n        addBlockType: function() {\n            this.getBlockTypeSettingsModal();\n\n            this.blockTypeSettingsModal.show();\n\n            this.blockTypeSettingsModal.onSubmit = $.proxy(function(name, handle) {\n                this.totalNewBlockTypes++;\n                var id = 'new' + this.totalNewBlockTypes;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                    '</div>'\n                ).appendTo(this.$blockTypeItemsContainer);\n\n                this.blockTypes[id] = new BlockType(this, $item);\n                this.blockTypes[id].applySettings(name, handle);\n                this.blockTypes[id].select();\n                this.blockTypes[id].addField();\n\n                this.blockTypeSort.addItems($item);\n            }, this);\n        },\n\n        addFieldToSelectedBlockType: function() {\n            if (this.selectedBlockType) {\n                this.selectedBlockType.addField();\n            }\n        },\n\n        getBlockTypeSettingsModal: function() {\n            if (!this.blockTypeSettingsModal) {\n                this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n            }\n\n            return this.blockTypeSettingsModal;\n        },\n\n        getFieldTypeSettingsHtml: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                    resolve(this._fieldTypeSettingsHtml[type]);\n                    return;\n                }\n\n                // Cancel the current request\n                if (this._cancelToken) {\n                    this._ignoreFailedRequest = true;\n                    this._cancelToken.cancel();\n                    Garnish.requestAnimationFrame(() => {\n                        this._ignoreFailedRequest = false;\n                    });\n                }\n\n                // Create a cancel token\n                this._cancelToken = axios.CancelToken.source();\n\n                Craft.sendActionRequest('POST', 'fields/render-settings', {\n                    cancelToken: this._cancelToken.token,\n                    data: {\n                        type: type,\n                        namespace: this.fieldTypeSettingsNamespace,\n                    }\n                }).then(response => {\n                    this._fieldTypeSettingsHtml[type] = response.data;\n                    resolve(response.data);\n                }).catch(() => {\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                    reject();\n                });\n            });\n        },\n    });\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend({\n        init: function() {\n            this.base();\n\n            this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n            this.setContainer(this.$form);\n\n            this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n            let $nameField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n            }).appendTo(this.$body);\n            let $nameInputContainer = $nameField.find('.input');\n            this.$nameInput = $nameInputContainer.find('.text');\n            this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n            let $handleField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                class: 'code',\n            }).appendTo(this.$body);\n            let $handleInputContainer = $handleField.find('.input');\n            this.$handleInput = $handleInputContainer.find('.text');\n            this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n            this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n            this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n            }).appendTo(this.$buttons);\n\n            this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n            this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n        },\n\n        onFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent multi form submits with the return key\n            if (!this.visible) {\n                return;\n            }\n\n            if (this.handleGenerator.listening) {\n                // Give the handle a chance to catch up with the input\n                this.handleGenerator.updateTarget();\n            }\n\n            // Basic validation\n            var name = Craft.trim(this.$nameInput.val()),\n                handle = Craft.trim(this.$handleInput.val());\n\n            if (!name || !handle) {\n                Garnish.shake(this.$form);\n            } else {\n                this.hide();\n                this.onSubmit(name, handle);\n            }\n        },\n\n        onDeleteClick: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                this.hide();\n                this.onDelete();\n            }\n        },\n\n        show: function(name, handle, errors) {\n            this.$nameInput.val(typeof name === 'string' ? name : '');\n            this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n            if (!handle) {\n                this.handleGenerator.startListening();\n            } else {\n                this.handleGenerator.stopListening();\n            }\n\n            if (typeof name === 'undefined') {\n                this.$deleteBtn.addClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Create'));\n            } else {\n                this.$deleteBtn.removeClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Apply'));\n            }\n\n            this.displayErrors('name', (errors ? errors.name : null));\n            this.displayErrors('handle', (errors ? errors.handle : null));\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout($.proxy(function() {\n                    this.$nameInput.trigger('focus');\n                }, this), 100);\n            }\n\n            this.base();\n        },\n\n        displayErrors: function(attr, errors) {\n            var $input = this['$' + attr + 'Input'],\n                $errorList = this['$' + attr + 'ErrorList'];\n\n            $errorList.children().remove();\n\n            if (errors) {\n                $input.addClass('error');\n                $errorList.show();\n\n                for (var i = 0; i < errors.length; i++) {\n                    $('<li/>').text(errors[i]).appendTo($errorList);\n                }\n            } else {\n                $input.removeClass('error');\n                $errorList.hide();\n            }\n        }\n    });\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend({\n        configurator: null,\n        id: null,\n        errors: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n        $nameHiddenInput: null,\n        $handleHiddenInput: null,\n        $settingsBtn: null,\n        $fieldItemsContainer: null,\n        $fieldSettingsContainer: null,\n\n        fields: null,\n        selectedField: null,\n        fieldSort: null,\n        totalNewFields: 0,\n        fieldSettings: null,\n\n        init: function(configurator, $item) {\n            this.configurator = configurator;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n            this.errors = this.$item.data('errors');\n\n            this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n            this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n            this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n            this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n            this.$settingsBtn = this.$item.find('.settings');\n\n            // Find the field items container if it exists, otherwise create it\n            this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldItemsContainer.length) {\n                this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n            }\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldSettingsContainer.length) {\n                this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n            }\n\n            // Find the existing fields\n            this.fields = {};\n\n            var $fieldItems = this.$fieldItemsContainer.children();\n\n            for (var i = 0; i < $fieldItems.length; i++) {\n                var $fieldItem = $($fieldItems[i]),\n                    id = $fieldItem.data('id');\n\n                this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                // Is this a new field?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewFields) {\n                    this.totalNewFields = parseInt(newMatch[1]);\n                }\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n            this.fieldSort = new Garnish.DragSort($fieldItems, {\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    // Adjust the field setting containers to match the new sort order\n                    for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                        var $item = $(this.fieldSort.$items[i]),\n                            id = $item.data('id'),\n                            field = this.fields[id];\n\n                        field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                    }\n                }, this)\n            });\n        },\n\n        select: function() {\n            if (this.configurator.selectedBlockType === this) {\n                return;\n            }\n\n            if (this.configurator.selectedBlockType) {\n                this.configurator.selectedBlockType.deselect();\n            }\n\n            this.configurator.$fieldsColumnContainer.removeClass('hidden');\n            this.$fieldItemsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.configurator.selectedBlockType = this;\n            Garnish.$win.trigger('resize');\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldsColumnContainer.addClass('hidden');\n            this.$fieldItemsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.configurator.selectedBlockType = null;\n\n            if (this.selectedField) {\n                this.selectedField.deselect();\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        showSettings: function() {\n            var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n            blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n            blockTypeSettingsModal.onSubmit = $.proxy(this, 'applySettings');\n            blockTypeSettingsModal.onDelete = $.proxy(this, 'selfDestruct');\n        },\n\n        applySettings: function(name, handle) {\n            if (this.errors) {\n                this.errors = null;\n                this.$settingsBtn.removeClass('error');\n            }\n\n            this.$nameLabel.text(name);\n            this.$handleLabel.text(handle);\n            this.$nameHiddenInput.val(name);\n            this.$handleHiddenInput.val(handle);\n        },\n\n        addField: function() {\n            this.totalNewFields++;\n            var id = 'new' + this.totalNewFields;\n\n            var $item = $(\n                '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                '<div class=\"mci-name\">' +\n                '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                '<div class=\"smalltext light code\"></div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                '</div>' +\n                '</div>'\n            ).appendTo(this.$fieldItemsContainer);\n\n            this.fields[id] = new Field(this.configurator, this, $item);\n            this.fields[id].select();\n\n            this.fieldSort.addItems($item);\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldItemsContainer.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.configurator.blockTypes[this.id] = null;\n            delete this.configurator.blockTypes[this.id];\n        }\n    });\n\n    var Field = Garnish.Base.extend({\n        configurator: null,\n        blockType: null,\n        id: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        selectedFieldType: null,\n        initializedFieldTypeSettings: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n\n        $fieldSettingsContainer: null,\n        $nameInput: null,\n        $handleInput: null,\n        $requiredCheckbox: null,\n        $typeSelect: null,\n        $translationSettingsContainer: null,\n        $typeSettingsContainer: null,\n        $widthInput: null,\n        $deleteBtn: null,\n\n        init: function(configurator, blockType, $item) {\n            this.configurator = configurator;\n            this.blockType = blockType;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n\n            this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n            this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n            this.initializedFieldTypeSettings = {};\n            this.fieldTypeSettingsTemplates = {};\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            var isNew = (!this.$fieldSettingsContainer.length);\n\n            if (isNew) {\n                this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n            }\n\n            this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n            this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n            this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n            this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n            this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n            this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n            this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n            this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n            if (isNew) {\n                this.setFieldType('craft\\\\fields\\\\PlainText');\n            } else {\n                this.selectedFieldType = this.$typeSelect.val();\n                this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n            }\n\n            if (!this.$handleInput.val()) {\n                new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n            this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n            this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n            this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n            this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n            let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.$widthInput.val(width);\n                }\n            });\n            widthSlider.$container.insertAfter($nameContainer);\n        },\n\n        select: function() {\n            if (this.blockType.selectedField === this) {\n                return;\n            }\n\n            if (this.blockType.selectedField) {\n                this.blockType.selectedField.deselect();\n            }\n\n            this.configurator.$fieldSettingsColumnContainer.removeClass('hidden');\n            this.blockType.$fieldSettingsContainer.removeClass('hidden');\n            this.$fieldSettingsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.blockType.selectedField = this;\n            Garnish.$win.trigger('resize');\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout($.proxy(function() {\n                    this.$nameInput.trigger('focus');\n                }, this), 100);\n            }\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldSettingsColumnContainer.addClass('hidden');\n            this.blockType.$fieldSettingsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.blockType.selectedField = null;\n            Garnish.$win.trigger('resize');\n        },\n\n        updateNameLabel: function() {\n            var val = this.$nameInput.val();\n            this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n        },\n\n        updateHandleLabel: function() {\n            this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n        },\n\n        updateRequiredIcon: function() {\n            if (this.$requiredCheckbox.prop('checked')) {\n                this.$nameLabel.addClass('mci-required');\n            } else {\n                this.$nameLabel.removeClass('mci-required');\n            }\n        },\n\n        onTypeSelectChange: function() {\n            this.setFieldType(this.$typeSelect.val());\n        },\n\n        setFieldType: function(type) {\n            // Update the Translation Method settings\n            Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n            if (this.selectedFieldType) {\n                this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n            }\n\n            this.selectedFieldType = type;\n            this.$typeSelect.val(type);\n\n            // Show a spinner\n            this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                this.$typeSettingsContainer.html('').append($settings);\n                if (fresh) {\n                    Craft.initUiElements($settings);\n                    Craft.appendHeadHtml(headHtml);\n                    Craft.appendFootHtml(footHtml);\n                }\n\n                Garnish.$win.trigger('resize');\n            }).catch(() => {\n                this.$typeSettingsContainer.html('');\n            });\n        },\n\n        getFieldTypeSettings: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                    resolve({\n                        fresh: false,\n                        $settings: this.initializedFieldTypeSettings[type],\n                    });\n                    return;\n                }\n\n                this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                    settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                    headHtml = this.getParsedFieldTypeHtml(headHtml);\n                    footHtml = this.getParsedFieldTypeHtml(footHtml);\n                    let $settings = $('<div/>').html(settingsHtml);\n                    this.initializedFieldTypeSettings[type] = $settings;\n                    resolve({\n                        fresh: true,\n                        $settings: $settings,\n                        headHtml: headHtml,\n                        footHtml: footHtml,\n                    });\n                }).catch($.noop);\n            });\n        },\n\n        getParsedFieldTypeHtml: function(html) {\n            if (typeof html === 'string') {\n                html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n            } else {\n                html = '';\n            }\n\n            return html;\n        },\n\n        getDefaultFieldSettings: function() {\n            var $container = $('<div/>', {\n                'data-id': this.id\n            });\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                id: this.inputIdPrefix + '-name',\n                name: this.inputNamePrefix + '[name]'\n            }).appendTo($container);\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                id: this.inputIdPrefix + '-handle',\n                'class': 'code',\n                name: this.inputNamePrefix + '[handle]',\n                maxlength: 64,\n                required: true\n            }).appendTo($container);\n\n            Craft.ui.createTextareaField({\n                label: Craft.t('app', 'Instructions'),\n                id: this.inputIdPrefix + '-instructions',\n                'class': 'nicetext',\n                name: this.inputNamePrefix + '[instructions]'\n            }).appendTo($container);\n\n            let $fieldset = $('<fieldset/>').appendTo($container);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'This field is required'),\n                id: this.inputIdPrefix + '-required',\n                name: this.inputNamePrefix + '[required]'\n            }).appendTo($fieldset);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'Use this field’s values as search keywords'),\n                id: this.inputIdPrefix + '-searchable',\n                name: this.inputNamePrefix + '[searchable]',\n                checked: false,\n            }).appendTo($fieldset);\n\n            var fieldTypeOptions = [];\n\n            for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                fieldTypeOptions.push({\n                    value: this.configurator.fieldTypeInfo[i].type,\n                    label: this.configurator.fieldTypeInfo[i].name\n                });\n            }\n\n            Craft.ui.createSelectField({\n                label: Craft.t('app', 'Field Type'),\n                id: this.inputIdPrefix + '-type',\n                name: this.inputNamePrefix + '[type]',\n                options: fieldTypeOptions,\n                value: 'craft\\\\fields\\\\PlainText'\n            }).appendTo($container);\n\n            if (Craft.isMultiSite) {\n                var $translationSettingsContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-settings'\n                }).appendTo($container);\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Translation Method'),\n                    id: this.inputIdPrefix + '-translation-method',\n                    name: this.inputNamePrefix + '[translationMethod]',\n                    options: [],\n                    value: 'none',\n                    toggle: true,\n                    targetPrefix: this.inputIdPrefix + '-translation-method-'\n                }).appendTo($translationSettingsContainer);\n\n                var $translationKeyFormatContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-method-custom',\n                    'class': 'hidden'\n                }).appendTo($translationSettingsContainer);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Translation Key Format'),\n                    id: this.inputIdPrefix + '-translation-key-format',\n                    name: this.inputNamePrefix + '[translationKeyFormat]'\n                }).appendTo($translationKeyFormatContainer);\n            }\n\n            $('<hr/>').appendTo($container);\n\n            $('<div/>', {\n                'class': 'mc-fieldtype-settings'\n            }).appendTo($container);\n\n            $('<input/>', {\n                type: 'hidden',\n                id: this.inputIdPrefix + '-width',\n                name: this.inputNamePrefix + '[width]',\n                value: '100',\n            }).appendTo($container);\n\n            $('<hr/>').appendTo($container);\n\n            $('<a/>', {\n                'class': 'error delete',\n                text: Craft.t('app', 'Delete')\n            }).appendTo($container);\n\n            return $container;\n        },\n\n        confirmDelete: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                this.selfDestruct();\n            }\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.blockType.fields[this.id] = null;\n            delete this.blockType.fields[this.id];\n        }\n    });\n})(jQuery);\n"]}