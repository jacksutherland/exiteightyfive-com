{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","on","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","first","focus","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","keyCode","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","$scrollContainer","scrollTop","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","event","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$focusableTab","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","$initialTab","selectTab","_focusTab","LOCATION_HASH","LEFT_KEY","RIGHT_KEY","contains","tab","deselectTab","setFocus","updateTabs","updateResponsiveTables","maxWidth","tabMargin","totalWidth","showOverflowMenu","preventScroll","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdDraftInPreview","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","publishDraftAction","hashedCpEditUrl","reload","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","createDraftNoticeHud","$closeBtn","deleteDraftAction","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnpublishedDraft","saveDraft","isActive","$spinners","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","$saveBtnContainer","data-align","hashedAddAnotherRedirectUrl","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","abort","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","o","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', $.proxy(function() {\n                    delete this.hud;\n                }, this));\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        }, this));\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        }, this));\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        }, this));\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        }, this));\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', $.proxy(function() {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n        }, this));\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        }, this));\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        }, this));\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: $.proxy(this, '_handleSelectionChange')\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', $.proxy(function() {\n            this.$exportBtn.removeClass('active');\n        }, this));\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange')\n                });\n\n            this._handleEnableElements = $.proxy(function(ev) {\n                this.elementSelect.addItems(ev.elements);\n            }, this);\n\n            this._handleDisableElements = $.proxy(function(ev) {\n                this.elementSelect.removeItems(ev.elements);\n            }, this);\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = $.proxy(function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            }, this);\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                }, this) : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? $.proxy(function() {\n                    this.elementSelect.resetItemOrder();\n                }, this) : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = $.proxy(function(ev) {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            }, this);\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        }, this));\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: $.proxy(this, 'onModalSelect')\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements: elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        }, this));\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: $.proxy(this, 'reorderItems')\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        }, this));\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        }, this));\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: function() {\n                this.reloadIndex = true;\n                this.reloadForm();\n            }.bind(this),\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = function() {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        }.bind(this);\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        }, this));\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, function(imageObject) {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: function() {\n                this._showGrid();\n            }.bind(this),\n            onChange: function(slider) {\n                this.straighten(slider);\n            }.bind(this),\n            onEnd: function() {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            }.bind(this)\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                }.bind(this)\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, function(data) {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        }.bind(this));\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = function() {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = function() {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                }.bind(this)\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = function() {\n            Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n        }.bind(this);\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: function() {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            }.bind(this),\n            duration: this.settings.animationDuration,\n            onComplete: function() {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            }.bind(this)\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        var onDragStartProxy = $.proxy(this, '_onDragStart'),\n            onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                return this.view.getSelectedElements().has('div.element[data-movable]');\n            }, this),\n\n            helper: $.proxy(function($file) {\n                return this._getFileDragHelper($file);\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFileDragStop'),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            }, this),\n\n            helper: $.proxy(function($draggeeHelper) {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFolderDragStop')\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = $.proxy(function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                }, this);\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                    }\n                }.bind(this);\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = function(folderDeleteList) {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                }.bind(this));\n            }\n        }.bind(this);\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: $.proxy(this, '_onUploadStart'),\n            fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n            fileuploaddone: $.proxy(this, '_onUploadComplete')\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', $.proxy(function() {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        }, this));\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = function() {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        }.bind(this);\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = function(parameterArray, parameterIndex, callback) {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = function(data, textStatus) {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            }.bind(this);\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        }.bind(this);\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', $.proxy(function(ev) {\n            this._onUpdateElements(true, ev.newElements);\n        }, this));\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n            menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this), 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = function(parameters) {\n            Craft.postActionRequest(parameters.action, parameters.params, function(data, textStatus) {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            }.bind(this));\n        }.bind(this);\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: $.proxy(this.resetOriginalFilename, this),\n                onCreateForm: $.proxy(this._renameHelper, this),\n                validators: [$.proxy(this.validateElementForm, this)]\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', $.proxy(function(ev) {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            }, this));\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            }.bind(this));\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        }, this));\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: $.proxy(this, 'onSelectTransform')\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            }, this));\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        }, this));\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: $.proxy(function(jqXHR, textStatus) {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            }, this)\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: $.proxy(function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout($.proxy(function() {\n                            this.$passwordInput.trigger('focus');\n                        }, this), 100);\n                    }\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: $.proxy(function() {\n                Craft.redirectTo('');\n            }, this)\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        }, this));\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $focusableTab: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready($.proxy(function() {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n        }, this));\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = this.$focusableTab = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n\n        let $initialTab;\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const $a = $tab.children('a');\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab($a);\n                    this._focusTab($a);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            if (!$initialTab && $a.hasClass('sel')) {\n                this.$selectedTab = $initialTab = $a;\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$tabsList[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === Garnish.LEFT_KEY) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        this._focusTab($tab);\n                    }\n                }\n            });\n        }\n\n        if ($initialTab) {\n            this.selectTab($initialTab, true);\n            this._focusTab($initialTab, false);\n        }\n    },\n\n    /**\n     * @param {object} tab\n     * @param {bool} [force]\n     */\n    selectTab: function(tab, force) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (!force && this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n\n        const index = $tab ? this.$tabs.index($tab.parent()) : null;\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        // Show its content area\n        if ($tab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).removeClass('hidden');\n        }\n\n        // Trigger a resize event to update any UI components that are listening for it, including updateTabs()\n        Garnish.$win.trigger('resize');\n\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n\n        if (typeof history !== 'undefined') {\n            // Delay changing the hash so it doesn't cause the browser to jump on page load\n            Garnish.requestAnimationFrame(() => {\n                history.replaceState(undefined, undefined, href);\n            });\n        }\n    },\n\n    /**\n     * @param {object} $tab\n     * @param {boolean} [setFocus]\n     * @private\n     */\n    _focusTab: function($tab, setFocus) {\n        if ($tab === this.$focusableTab) {\n            return;\n        }\n\n        if (this.$focusableTab) {\n            this.$focusableTab.attr('tabindex', '-1');\n        }\n\n        this.$focusableTab = $tab.attr('tabindex', '0');\n\n        if (setFocus !== false) {\n            this.$focusableTab.focus();\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n\n        // Hide its content area\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        // Keep track of the focussed element in case it's one of the tabs\n        const activeElement = document.activeElement;\n\n        const maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        const tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        let totalWidth = 0;\n        let showOverflowMenu = false;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n            $tab.appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            const $a = $tab.find('> a');\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $a\n                    .removeAttr('role')\n                    .attr('tabindex', this.$focusableTab && $a[0] === this.$focusableTab[0] ? '0' : '-1');\n            } else {\n                $tab.appendTo(this.$overflowTabList);\n                this.$overflowTabBtn.data('menubtn').menu.addOptions($a);\n                showOverflowMenu = true;\n            }\n\n            if (document.activeElement !== activeElement) {\n                activeElement.focus({preventScroll: true});\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                }, this));\n            }, this));\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n\n            callback = function() {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            }.bind(this);\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(function(info) {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                }.bind(this));\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(function(info) {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(function(info) {\n                                resolve(info);\n                            });\n                    }.bind(this));\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(function(info) {\n                        resolve(info);\n                    });\n            }\n        }.bind(this));\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(function(updates) {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                }.bind(this))\n                .catch(function(e) {\n                    this._cacheUpdates({}).then(resolve);\n                }.bind(this));\n        }.bind(this));\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        }, this));\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            }, this));\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        }, this));\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, $.proxy(function() {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, $.proxy(function() {\n                this.$a.remove();\n                this.destroy();\n            }, this));\n        }, this));\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newCategoryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        }, this));\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = $.proxy(function() {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            }, this);\n        }\n\n        var func = $.proxy(function() {\n            this.animateElementAway($allCategories.eq(i), callback);\n        }, this);\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach($.proxy(function(d) {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse(\"%Y-%m-%d\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        }, this));\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css(\"left\", position.left + \"px\");\n        this.$tip.css(\"top\", position.top + \"px\");\n    },\n\n    show: function() {\n        this.$tip.css(\"display\", 'block');\n    },\n\n    hide: function() {\n        this.$tip.css(\"display\", 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', $.proxy(function() {\n            this.resize();\n        }, this));\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: \"%-m/%-d\",\n                month: \"%-m/%y\",\n                year: \"%Y\"\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n            .attr(\"width\", svg.width)\n            .attr(\"height\", svg.height);\n\n        this.drawingArea = this.svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append(\"g\")\n            .attr(\"class\", \"x ticks-axis\")\n            .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x grid-line\")\n                .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat(\"\")\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y grid-line\")\n                .attr(\"transform\", \"translate(0 , 0)\")\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat(\"\")\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-line\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr(\"d\", line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-area\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr(\"d\", area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr(\"class\", \"plots\")\n                .selectAll(\"circle\")\n                .data(this.dataTable.rows)\n                .enter()\n                .append(\"circle\")\n                .style('fill', this.settings.colors[0])\n                .attr(\"class\", $.proxy(function(d, index) {\n                    return 'plot plot-' + index;\n                }, this))\n                .attr(\"r\", 4)\n                .attr(\"cx\", $.proxy(function(d) {\n                    return x(d[0]);\n                }, this))\n                .attr(\"cy\", $.proxy(function(d) {\n                    return y(d[1]);\n                }, this));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr(\"class\", \"tip-triggers\")\n                .selectAll(\"rect\")\n                .data(this.dataTable.rows)\n                .enter().append(\"rect\")\n                .attr(\"class\", \"tip-trigger\")\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr(\"width\", tipTriggerWidth)\n                .attr(\"height\", this.height)\n                .attr(\"x\", $.proxy(function(d) {\n                    return x(d[0]) - tipTriggerWidth / 2;\n                }, this))\n                .on(\"mouseover\", $.proxy(function(d, index) {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                }, this))\n                .on(\"mouseout\", $.proxy(function(d, index) {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                }, this));\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, $.proxy(function(key, value) {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        }, this));\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        }, this));\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: $.proxy(function() {\n                this.updateSourcesOnSave = true;\n            }, this)\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        }, this));\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = $.proxy(this, 'getHelper');\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: $.proxy(function() {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            }, this),\n            onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdDraftInPreview: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', function() {\n            return this.serializeForm(true)\n        }.bind(this));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Create a draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            }.bind(this));\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                }.bind(this));\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', function() {\n            this.showStatusHud(this.$statusIcon);\n        }.bind(this));\n\n        this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    mergeChanges: function() {\n        // Make sure there aren't any unsaved changes\n        this.checkForm();\n\n        // Make sure we aren't currently saving something\n        if (this.saving) {\n            this.queue.push(this.mergeChanges.bind(this));\n            return;\n        }\n\n        this.saving = true;\n        $('#merge-changes-spinner').removeClass('hidden');\n\n        Craft.postActionRequest('drafts/merge-source-changes', {\n            elementType: this.settings.elementType,\n            draftId: this.settings.draftId,\n            siteId: this.settings.siteId,\n        }, function(response, textStatus) {\n            if (textStatus === 'success') {\n                window.location.reload();\n            } else {\n                $('#merge-changes-spinner').addClass('hidden');\n            }\n        });\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n            this.$expandSiteStatusesBtn.remove();\n        }.bind(this));\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height: height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise(function(resolve, reject) {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            }.bind(this));\n        }.bind(this));\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise(function(resolve, reject) {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        }.bind(this));\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = true;\n                    }\n                    this.listenForChanges();\n                }\n            }.bind(this));\n            this.preview.on('close', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = false;\n                        const $statusIcons = this.statusIcons();\n                        if ($statusIcons.hasClass('checkmark-icon')) {\n                            $statusIcons.addClass('hidden');\n                        }\n                    }\n                    this.stopListeningForChanges();\n                }\n\n                // did we just create a draft?\n                if (this.createdDraftInPreview) {\n                    setTimeout(() => {\n                        this.createDraftNoticeHud();\n                        this.createdDraftInPreview = false;\n                    }, 750);\n                }\n            }.bind(this));\n        }\n        return this.preview;\n    },\n\n    createDraftNoticeHud: function() {\n        const $closeBtn = $('<button/>', {\n            class: 'btn',\n            type: 'button',\n            text: Craft.t('app', 'Keep it'),\n        });\n        const $deleteBtn = $('<button/>', {\n            class: 'btn caution',\n            type: 'button',\n            text: Craft.t('app', 'Delete it'),\n        });\n\n        const hud = new Garnish.HUD(\n            $('#context-btngroup'),\n            $('<div/>', {class: 'readable centeralign'})\n                .append(\n                    $('<p/>', {\n                        text: Craft.t('app', 'You’re now editing a draft.'),\n                    })\n                )\n                .append(\n                    $('<div/>', {class: 'flex flex-nowrap'})\n                        .append($closeBtn)\n                        .append($deleteBtn)\n                ),\n            {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            }\n        );\n\n        $closeBtn.on('click', () => {\n            hud.hide();\n            hud.destroy();\n        });\n\n        $deleteBtn.on('click', () => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.deleteDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }\n        })\n    },\n\n    openPreview: function() {\n        return new Promise(function(resolve, reject) {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(function() {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                }.bind(this))\n                .catch(reject);\n        }.bind(this))\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise(function(resolve, reject) {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        }.bind(this));\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise(function(resolve, reject) {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        }.bind(this));\n    },\n\n    saveDraft: function(data) {\n        return new Promise(function(resolve, reject) {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(function() {\n                    this.checkForm()\n                }.bind(this));\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Create a draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            title: Craft.shortcutText('S', false, true),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: Craft.shortcutText('S'),\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n\n                    // is Live Preview currently active?\n                    if (this.openingPreview || (this.preview && this.preview.isActive)) {\n                        this.createdDraftInPreview = true;\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            }.bind(this));\n        }.bind(this));\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!this.enableAutosave) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td: td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        }, this));\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: $.proxy(function() {\n                    setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        }, this));\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newEntryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newEntryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = $.proxy(function() {\n            this.refreshCols(false, true);\n        }, this);\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready($.proxy(function() {\n            this.refreshCols(false, false);\n        }, this));\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.refreshCols(force);\n            }, this));\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n        options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        }, this));\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                }, this));\n            }\n        }, this));\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: $.proxy(this, '_onDragStart'),\n            onDrag: $.proxy(this, '_onDrag'),\n            onDragStop: $.proxy(this, '_onDragStop')\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _handleSuccessProxy: null,\n    _handleErrorProxy: null,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n        this._handleErrorProxy = $.proxy(this, 'handleError');\n        this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        }, this));\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        }, this));\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        }, this));\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n            this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        }, this));\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        }, this));\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n            this.$previewContainer.hide();\n        }, this));\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this._handleSuccessProxy,\n                error: this._handleErrorProxy\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        }, this));\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = $.proxy(this, 'updateIframe');\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout($.proxy(function() {\n\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, this), 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        }, this));\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', $.proxy(function(ev) {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        }, this));\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        }, this));\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: $.proxy(this, 'getHelper')\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', $.proxy(function() {\n            this.$draggee.addClass('hidden');\n        }, this));\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', $.proxy(function() {\n            this.$draggee.css('height', 'auto');\n        }, this));\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n    _updateAncestorsProxy: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: $.proxy(this, 'getHelper'),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            }, this));\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            }, this));\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame($.proxy(function() {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        }, this));\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        if (!this._updateAncestorsProxy) {\n            this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                onSortChange: $.proxy(this, '_onStructureTableSortChange')\n            });\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: $.proxy(function(response) {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            }, this),\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n        }, this));\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout($.proxy(function() {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, this), 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: $.proxy(this, 'selectTag')\n                    });\n\n                    this.addListener($menu, 'mousedown', $.proxy(function() {\n                        this._ignoreBlur = true;\n                    }, this));\n\n                    this.searchMenu.show();\n                }\n            }, this));\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            }, this));\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done($.proxy(function() {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        }, this));\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', $.proxy(function() {\n                    delete this.hud;\n                }, this));\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        }, this));\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        }, this));\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        }, this));\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        }, this));\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', $.proxy(function() {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n        }, this));\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        }, this));\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        }, this));\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: $.proxy(this, '_handleSelectionChange')\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', $.proxy(function() {\n            this.$exportBtn.removeClass('active');\n        }, this));\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange')\n                });\n\n            this._handleEnableElements = $.proxy(function(ev) {\n                this.elementSelect.addItems(ev.elements);\n            }, this);\n\n            this._handleDisableElements = $.proxy(function(ev) {\n                this.elementSelect.removeItems(ev.elements);\n            }, this);\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = $.proxy(function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            }, this);\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                }, this) : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? $.proxy(function() {\n                    this.elementSelect.resetItemOrder();\n                }, this) : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = $.proxy(function(ev) {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            }, this);\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        }, this));\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: $.proxy(this, 'onModalSelect')\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements: elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        }, this));\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: $.proxy(this, 'reorderItems')\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        }, this));\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        }, this));\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: function() {\n                this.reloadIndex = true;\n                this.reloadForm();\n            }.bind(this),\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = function() {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        }.bind(this);\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        }, this));\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, function(imageObject) {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: function() {\n                this._showGrid();\n            }.bind(this),\n            onChange: function(slider) {\n                this.straighten(slider);\n            }.bind(this),\n            onEnd: function() {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            }.bind(this)\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                }.bind(this)\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, function(data) {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        }.bind(this));\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = function() {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = function() {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                }.bind(this)\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = function() {\n            Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n        }.bind(this);\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: function() {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            }.bind(this),\n            duration: this.settings.animationDuration,\n            onComplete: function() {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            }.bind(this)\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        var onDragStartProxy = $.proxy(this, '_onDragStart'),\n            onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                return this.view.getSelectedElements().has('div.element[data-movable]');\n            }, this),\n\n            helper: $.proxy(function($file) {\n                return this._getFileDragHelper($file);\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFileDragStop'),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            }, this),\n\n            helper: $.proxy(function($draggeeHelper) {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFolderDragStop')\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = $.proxy(function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                }, this);\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                    }\n                }.bind(this);\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = function(folderDeleteList) {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                }.bind(this));\n            }\n        }.bind(this);\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: $.proxy(this, '_onUploadStart'),\n            fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n            fileuploaddone: $.proxy(this, '_onUploadComplete')\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', $.proxy(function() {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        }, this));\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = function() {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        }.bind(this);\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = function(parameterArray, parameterIndex, callback) {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = function(data, textStatus) {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            }.bind(this);\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        }.bind(this);\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', $.proxy(function(ev) {\n            this._onUpdateElements(true, ev.newElements);\n        }, this));\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n            menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this), 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = function(parameters) {\n            Craft.postActionRequest(parameters.action, parameters.params, function(data, textStatus) {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            }.bind(this));\n        }.bind(this);\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: $.proxy(this.resetOriginalFilename, this),\n                onCreateForm: $.proxy(this._renameHelper, this),\n                validators: [$.proxy(this.validateElementForm, this)]\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', $.proxy(function(ev) {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            }, this));\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            }.bind(this));\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        }, this));\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: $.proxy(this, 'onSelectTransform')\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            }, this));\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        }, this));\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: $.proxy(function(jqXHR, textStatus) {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            }, this)\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: $.proxy(function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout($.proxy(function() {\n                            this.$passwordInput.trigger('focus');\n                        }, this), 100);\n                    }\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: $.proxy(function() {\n                Craft.redirectTo('');\n            }, this)\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        }, this));\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $focusableTab: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready($.proxy(function() {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n        }, this));\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = this.$focusableTab = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n\n        let $initialTab;\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const $a = $tab.children('a');\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab($a);\n                    this._focusTab($a);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            if (!$initialTab && $a.hasClass('sel')) {\n                this.$selectedTab = $initialTab = $a;\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$tabsList[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === Garnish.LEFT_KEY) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        this._focusTab($tab);\n                    }\n                }\n            });\n        }\n\n        if ($initialTab) {\n            this.selectTab($initialTab, true);\n            this._focusTab($initialTab, false);\n        }\n    },\n\n    /**\n     * @param {object} tab\n     * @param {bool} [force]\n     */\n    selectTab: function(tab, force) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (!force && this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n\n        const index = $tab ? this.$tabs.index($tab.parent()) : null;\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        // Show its content area\n        if ($tab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).removeClass('hidden');\n        }\n\n        // Trigger a resize event to update any UI components that are listening for it, including updateTabs()\n        Garnish.$win.trigger('resize');\n\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n\n        if (typeof history !== 'undefined') {\n            // Delay changing the hash so it doesn't cause the browser to jump on page load\n            Garnish.requestAnimationFrame(() => {\n                history.replaceState(undefined, undefined, href);\n            });\n        }\n    },\n\n    /**\n     * @param {object} $tab\n     * @param {boolean} [setFocus]\n     * @private\n     */\n    _focusTab: function($tab, setFocus) {\n        if ($tab === this.$focusableTab) {\n            return;\n        }\n\n        if (this.$focusableTab) {\n            this.$focusableTab.attr('tabindex', '-1');\n        }\n\n        this.$focusableTab = $tab.attr('tabindex', '0');\n\n        if (setFocus !== false) {\n            this.$focusableTab.focus();\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n\n        // Hide its content area\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        // Keep track of the focussed element in case it's one of the tabs\n        const activeElement = document.activeElement;\n\n        const maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        const tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        let totalWidth = 0;\n        let showOverflowMenu = false;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n            $tab.appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            const $a = $tab.find('> a');\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $a\n                    .removeAttr('role')\n                    .attr('tabindex', this.$focusableTab && $a[0] === this.$focusableTab[0] ? '0' : '-1');\n            } else {\n                $tab.appendTo(this.$overflowTabList);\n                this.$overflowTabBtn.data('menubtn').menu.addOptions($a);\n                showOverflowMenu = true;\n            }\n\n            if (document.activeElement !== activeElement) {\n                activeElement.focus({preventScroll: true});\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                }, this));\n            }, this));\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n\n            callback = function() {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            }.bind(this);\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(function(info) {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                }.bind(this));\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(function(info) {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(function(info) {\n                                resolve(info);\n                            });\n                    }.bind(this));\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(function(info) {\n                        resolve(info);\n                    });\n            }\n        }.bind(this));\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(function(updates) {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                }.bind(this))\n                .catch(function(e) {\n                    this._cacheUpdates({}).then(resolve);\n                }.bind(this));\n        }.bind(this));\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        }, this));\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            }, this));\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        }, this));\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, $.proxy(function() {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, $.proxy(function() {\n                this.$a.remove();\n                this.destroy();\n            }, this));\n        }, this));\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newCategoryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        }, this));\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = $.proxy(function() {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            }, this);\n        }\n\n        var func = $.proxy(function() {\n            this.animateElementAway($allCategories.eq(i), callback);\n        }, this);\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach($.proxy(function(d) {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse(\"%Y-%m-%d\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        }, this));\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css(\"left\", position.left + \"px\");\n        this.$tip.css(\"top\", position.top + \"px\");\n    },\n\n    show: function() {\n        this.$tip.css(\"display\", 'block');\n    },\n\n    hide: function() {\n        this.$tip.css(\"display\", 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', $.proxy(function() {\n            this.resize();\n        }, this));\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: \"%-m/%-d\",\n                month: \"%-m/%y\",\n                year: \"%Y\"\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n            .attr(\"width\", svg.width)\n            .attr(\"height\", svg.height);\n\n        this.drawingArea = this.svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append(\"g\")\n            .attr(\"class\", \"x ticks-axis\")\n            .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x grid-line\")\n                .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat(\"\")\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y grid-line\")\n                .attr(\"transform\", \"translate(0 , 0)\")\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat(\"\")\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-line\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr(\"d\", line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-area\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr(\"d\", area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr(\"class\", \"plots\")\n                .selectAll(\"circle\")\n                .data(this.dataTable.rows)\n                .enter()\n                .append(\"circle\")\n                .style('fill', this.settings.colors[0])\n                .attr(\"class\", $.proxy(function(d, index) {\n                    return 'plot plot-' + index;\n                }, this))\n                .attr(\"r\", 4)\n                .attr(\"cx\", $.proxy(function(d) {\n                    return x(d[0]);\n                }, this))\n                .attr(\"cy\", $.proxy(function(d) {\n                    return y(d[1]);\n                }, this));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr(\"class\", \"tip-triggers\")\n                .selectAll(\"rect\")\n                .data(this.dataTable.rows)\n                .enter().append(\"rect\")\n                .attr(\"class\", \"tip-trigger\")\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr(\"width\", tipTriggerWidth)\n                .attr(\"height\", this.height)\n                .attr(\"x\", $.proxy(function(d) {\n                    return x(d[0]) - tipTriggerWidth / 2;\n                }, this))\n                .on(\"mouseover\", $.proxy(function(d, index) {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                }, this))\n                .on(\"mouseout\", $.proxy(function(d, index) {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                }, this));\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, $.proxy(function(key, value) {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        }, this));\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        }, this));\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: $.proxy(function() {\n                this.updateSourcesOnSave = true;\n            }, this)\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        }, this));\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = $.proxy(this, 'getHelper');\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: $.proxy(function() {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            }, this),\n            onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdDraftInPreview: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', function() {\n            return this.serializeForm(true)\n        }.bind(this));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Create a draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            }.bind(this));\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                }.bind(this));\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', function() {\n            this.showStatusHud(this.$statusIcon);\n        }.bind(this));\n\n        this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    mergeChanges: function() {\n        // Make sure there aren't any unsaved changes\n        this.checkForm();\n\n        // Make sure we aren't currently saving something\n        if (this.saving) {\n            this.queue.push(this.mergeChanges.bind(this));\n            return;\n        }\n\n        this.saving = true;\n        $('#merge-changes-spinner').removeClass('hidden');\n\n        Craft.postActionRequest('drafts/merge-source-changes', {\n            elementType: this.settings.elementType,\n            draftId: this.settings.draftId,\n            siteId: this.settings.siteId,\n        }, function(response, textStatus) {\n            if (textStatus === 'success') {\n                window.location.reload();\n            } else {\n                $('#merge-changes-spinner').addClass('hidden');\n            }\n        });\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n            this.$expandSiteStatusesBtn.remove();\n        }.bind(this));\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height: height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise(function(resolve, reject) {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            }.bind(this));\n        }.bind(this));\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise(function(resolve, reject) {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        }.bind(this));\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = true;\n                    }\n                    this.listenForChanges();\n                }\n            }.bind(this));\n            this.preview.on('close', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = false;\n                        const $statusIcons = this.statusIcons();\n                        if ($statusIcons.hasClass('checkmark-icon')) {\n                            $statusIcons.addClass('hidden');\n                        }\n                    }\n                    this.stopListeningForChanges();\n                }\n\n                // did we just create a draft?\n                if (this.createdDraftInPreview) {\n                    setTimeout(() => {\n                        this.createDraftNoticeHud();\n                        this.createdDraftInPreview = false;\n                    }, 750);\n                }\n            }.bind(this));\n        }\n        return this.preview;\n    },\n\n    createDraftNoticeHud: function() {\n        const $closeBtn = $('<button/>', {\n            class: 'btn',\n            type: 'button',\n            text: Craft.t('app', 'Keep it'),\n        });\n        const $deleteBtn = $('<button/>', {\n            class: 'btn caution',\n            type: 'button',\n            text: Craft.t('app', 'Delete it'),\n        });\n\n        const hud = new Garnish.HUD(\n            $('#context-btngroup'),\n            $('<div/>', {class: 'readable centeralign'})\n                .append(\n                    $('<p/>', {\n                        text: Craft.t('app', 'You’re now editing a draft.'),\n                    })\n                )\n                .append(\n                    $('<div/>', {class: 'flex flex-nowrap'})\n                        .append($closeBtn)\n                        .append($deleteBtn)\n                ),\n            {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            }\n        );\n\n        $closeBtn.on('click', () => {\n            hud.hide();\n            hud.destroy();\n        });\n\n        $deleteBtn.on('click', () => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.deleteDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }\n        })\n    },\n\n    openPreview: function() {\n        return new Promise(function(resolve, reject) {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(function() {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                }.bind(this))\n                .catch(reject);\n        }.bind(this))\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise(function(resolve, reject) {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        }.bind(this));\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise(function(resolve, reject) {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        }.bind(this));\n    },\n\n    saveDraft: function(data) {\n        return new Promise(function(resolve, reject) {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(function() {\n                    this.checkForm()\n                }.bind(this));\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Create a draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            title: Craft.shortcutText('S', false, true),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: Craft.shortcutText('S'),\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n\n                    // is Live Preview currently active?\n                    if (this.openingPreview || (this.preview && this.preview.isActive)) {\n                        this.createdDraftInPreview = true;\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            }.bind(this));\n        }.bind(this));\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!this.enableAutosave) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td: td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        }, this));\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: $.proxy(function() {\n                    setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        }, this));\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newEntryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newEntryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = $.proxy(function() {\n            this.refreshCols(false, true);\n        }, this);\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready($.proxy(function() {\n            this.refreshCols(false, false);\n        }, this));\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.refreshCols(force);\n            }, this));\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n        options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        }, this));\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                }, this));\n            }\n        }, this));\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: $.proxy(this, '_onDragStart'),\n            onDrag: $.proxy(this, '_onDrag'),\n            onDragStop: $.proxy(this, '_onDragStop')\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _handleSuccessProxy: null,\n    _handleErrorProxy: null,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n        this._handleErrorProxy = $.proxy(this, 'handleError');\n        this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        }, this));\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        }, this));\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        }, this));\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n            this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        }, this));\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        }, this));\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n            this.$previewContainer.hide();\n        }, this));\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this._handleSuccessProxy,\n                error: this._handleErrorProxy\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        }, this));\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = $.proxy(this, 'updateIframe');\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout($.proxy(function() {\n\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, this), 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        }, this));\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', $.proxy(function(ev) {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        }, this));\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        }, this));\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: $.proxy(this, 'getHelper')\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', $.proxy(function() {\n            this.$draggee.addClass('hidden');\n        }, this));\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', $.proxy(function() {\n            this.$draggee.css('height', 'auto');\n        }, this));\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n    _updateAncestorsProxy: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: $.proxy(this, 'getHelper'),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            }, this));\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            }, this));\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame($.proxy(function() {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        }, this));\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        if (!this._updateAncestorsProxy) {\n            this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                onSortChange: $.proxy(this, '_onStructureTableSortChange')\n            });\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: $.proxy(function(response) {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            }, this),\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n        }, this));\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout($.proxy(function() {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, this), 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: $.proxy(this, 'selectTag')\n                    });\n\n                    this.addListener($menu, 'mousedown', $.proxy(function() {\n                        this._ignoreBlur = true;\n                    }, this));\n\n                    this.searchMenu.show();\n                }\n            }, this));\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            }, this));\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done($.proxy(function() {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        }, this));\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}